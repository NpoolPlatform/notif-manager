// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/notif-manager/pkg/db/ent/announcement"
	"github.com/NpoolPlatform/notif-manager/pkg/db/ent/notif"
	"github.com/NpoolPlatform/notif-manager/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/notif-manager/pkg/db/ent/readannouncement"
	"github.com/NpoolPlatform/notif-manager/pkg/db/ent/sendannouncement"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnnouncement     = "Announcement"
	TypeNotif            = "Notif"
	TypeReadAnnouncement = "ReadAnnouncement"
	TypeSendAnnouncement = "SendAnnouncement"
)

// AnnouncementMutation represents an operation that mutates the Announcement nodes in the graph.
type AnnouncementMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	title         *string
	content       *string
	channels      *[]string
	end_at        *uint32
	addend_at     *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Announcement, error)
	predicates    []predicate.Announcement
}

var _ ent.Mutation = (*AnnouncementMutation)(nil)

// announcementOption allows management of the mutation configuration using functional options.
type announcementOption func(*AnnouncementMutation)

// newAnnouncementMutation creates new mutation for the Announcement entity.
func newAnnouncementMutation(c config, op Op, opts ...announcementOption) *AnnouncementMutation {
	m := &AnnouncementMutation{
		config:        c,
		op:            op,
		typ:           TypeAnnouncement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnnouncementID sets the ID field of the mutation.
func withAnnouncementID(id uuid.UUID) announcementOption {
	return func(m *AnnouncementMutation) {
		var (
			err   error
			once  sync.Once
			value *Announcement
		)
		m.oldValue = func(ctx context.Context) (*Announcement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Announcement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnnouncement sets the old Announcement of the mutation.
func withAnnouncement(node *Announcement) announcementOption {
	return func(m *AnnouncementMutation) {
		m.oldValue = func(context.Context) (*Announcement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnnouncementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnnouncementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Announcement entities.
func (m *AnnouncementMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnnouncementMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AnnouncementMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Announcement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AnnouncementMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AnnouncementMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *AnnouncementMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *AnnouncementMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AnnouncementMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AnnouncementMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AnnouncementMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *AnnouncementMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *AnnouncementMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AnnouncementMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AnnouncementMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AnnouncementMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *AnnouncementMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *AnnouncementMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AnnouncementMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *AnnouncementMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AnnouncementMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *AnnouncementMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[announcement.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *AnnouncementMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[announcement.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AnnouncementMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, announcement.FieldAppID)
}

// SetTitle sets the "title" field.
func (m *AnnouncementMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AnnouncementMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *AnnouncementMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[announcement.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *AnnouncementMutation) TitleCleared() bool {
	_, ok := m.clearedFields[announcement.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *AnnouncementMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, announcement.FieldTitle)
}

// SetContent sets the "content" field.
func (m *AnnouncementMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *AnnouncementMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *AnnouncementMutation) ClearContent() {
	m.content = nil
	m.clearedFields[announcement.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *AnnouncementMutation) ContentCleared() bool {
	_, ok := m.clearedFields[announcement.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *AnnouncementMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, announcement.FieldContent)
}

// SetChannels sets the "channels" field.
func (m *AnnouncementMutation) SetChannels(s []string) {
	m.channels = &s
}

// Channels returns the value of the "channels" field in the mutation.
func (m *AnnouncementMutation) Channels() (r []string, exists bool) {
	v := m.channels
	if v == nil {
		return
	}
	return *v, true
}

// OldChannels returns the old "channels" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldChannels(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannels is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannels requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannels: %w", err)
	}
	return oldValue.Channels, nil
}

// ClearChannels clears the value of the "channels" field.
func (m *AnnouncementMutation) ClearChannels() {
	m.channels = nil
	m.clearedFields[announcement.FieldChannels] = struct{}{}
}

// ChannelsCleared returns if the "channels" field was cleared in this mutation.
func (m *AnnouncementMutation) ChannelsCleared() bool {
	_, ok := m.clearedFields[announcement.FieldChannels]
	return ok
}

// ResetChannels resets all changes to the "channels" field.
func (m *AnnouncementMutation) ResetChannels() {
	m.channels = nil
	delete(m.clearedFields, announcement.FieldChannels)
}

// SetEndAt sets the "end_at" field.
func (m *AnnouncementMutation) SetEndAt(u uint32) {
	m.end_at = &u
	m.addend_at = nil
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *AnnouncementMutation) EndAt() (r uint32, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the Announcement entity.
// If the Announcement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnnouncementMutation) OldEndAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// AddEndAt adds u to the "end_at" field.
func (m *AnnouncementMutation) AddEndAt(u int32) {
	if m.addend_at != nil {
		*m.addend_at += u
	} else {
		m.addend_at = &u
	}
}

// AddedEndAt returns the value that was added to the "end_at" field in this mutation.
func (m *AnnouncementMutation) AddedEndAt() (r int32, exists bool) {
	v := m.addend_at
	if v == nil {
		return
	}
	return *v, true
}

// ClearEndAt clears the value of the "end_at" field.
func (m *AnnouncementMutation) ClearEndAt() {
	m.end_at = nil
	m.addend_at = nil
	m.clearedFields[announcement.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *AnnouncementMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[announcement.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *AnnouncementMutation) ResetEndAt() {
	m.end_at = nil
	m.addend_at = nil
	delete(m.clearedFields, announcement.FieldEndAt)
}

// Where appends a list predicates to the AnnouncementMutation builder.
func (m *AnnouncementMutation) Where(ps ...predicate.Announcement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AnnouncementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Announcement).
func (m *AnnouncementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnnouncementMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.created_at != nil {
		fields = append(fields, announcement.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, announcement.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, announcement.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, announcement.FieldAppID)
	}
	if m.title != nil {
		fields = append(fields, announcement.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, announcement.FieldContent)
	}
	if m.channels != nil {
		fields = append(fields, announcement.FieldChannels)
	}
	if m.end_at != nil {
		fields = append(fields, announcement.FieldEndAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnnouncementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case announcement.FieldCreatedAt:
		return m.CreatedAt()
	case announcement.FieldUpdatedAt:
		return m.UpdatedAt()
	case announcement.FieldDeletedAt:
		return m.DeletedAt()
	case announcement.FieldAppID:
		return m.AppID()
	case announcement.FieldTitle:
		return m.Title()
	case announcement.FieldContent:
		return m.Content()
	case announcement.FieldChannels:
		return m.Channels()
	case announcement.FieldEndAt:
		return m.EndAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnnouncementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case announcement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case announcement.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case announcement.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case announcement.FieldAppID:
		return m.OldAppID(ctx)
	case announcement.FieldTitle:
		return m.OldTitle(ctx)
	case announcement.FieldContent:
		return m.OldContent(ctx)
	case announcement.FieldChannels:
		return m.OldChannels(ctx)
	case announcement.FieldEndAt:
		return m.OldEndAt(ctx)
	}
	return nil, fmt.Errorf("unknown Announcement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnnouncementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case announcement.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case announcement.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case announcement.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case announcement.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case announcement.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case announcement.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case announcement.FieldChannels:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannels(v)
		return nil
	case announcement.FieldEndAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown Announcement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnnouncementMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, announcement.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, announcement.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, announcement.FieldDeletedAt)
	}
	if m.addend_at != nil {
		fields = append(fields, announcement.FieldEndAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnnouncementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case announcement.FieldCreatedAt:
		return m.AddedCreatedAt()
	case announcement.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case announcement.FieldDeletedAt:
		return m.AddedDeletedAt()
	case announcement.FieldEndAt:
		return m.AddedEndAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnnouncementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case announcement.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case announcement.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case announcement.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case announcement.FieldEndAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndAt(v)
		return nil
	}
	return fmt.Errorf("unknown Announcement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnnouncementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(announcement.FieldAppID) {
		fields = append(fields, announcement.FieldAppID)
	}
	if m.FieldCleared(announcement.FieldTitle) {
		fields = append(fields, announcement.FieldTitle)
	}
	if m.FieldCleared(announcement.FieldContent) {
		fields = append(fields, announcement.FieldContent)
	}
	if m.FieldCleared(announcement.FieldChannels) {
		fields = append(fields, announcement.FieldChannels)
	}
	if m.FieldCleared(announcement.FieldEndAt) {
		fields = append(fields, announcement.FieldEndAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnnouncementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnnouncementMutation) ClearField(name string) error {
	switch name {
	case announcement.FieldAppID:
		m.ClearAppID()
		return nil
	case announcement.FieldTitle:
		m.ClearTitle()
		return nil
	case announcement.FieldContent:
		m.ClearContent()
		return nil
	case announcement.FieldChannels:
		m.ClearChannels()
		return nil
	case announcement.FieldEndAt:
		m.ClearEndAt()
		return nil
	}
	return fmt.Errorf("unknown Announcement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnnouncementMutation) ResetField(name string) error {
	switch name {
	case announcement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case announcement.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case announcement.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case announcement.FieldAppID:
		m.ResetAppID()
		return nil
	case announcement.FieldTitle:
		m.ResetTitle()
		return nil
	case announcement.FieldContent:
		m.ResetContent()
		return nil
	case announcement.FieldChannels:
		m.ResetChannels()
		return nil
	case announcement.FieldEndAt:
		m.ResetEndAt()
		return nil
	}
	return fmt.Errorf("unknown Announcement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnnouncementMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnnouncementMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnnouncementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnnouncementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnnouncementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnnouncementMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnnouncementMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Announcement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnnouncementMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Announcement edge %s", name)
}

// NotifMutation represents an operation that mutates the Notif nodes in the graph.
type NotifMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	already_read  *bool
	lang_id       *uuid.UUID
	event_type    *string
	use_template  *bool
	title         *string
	content       *string
	channels      *[]string
	email_send    *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Notif, error)
	predicates    []predicate.Notif
}

var _ ent.Mutation = (*NotifMutation)(nil)

// notifOption allows management of the mutation configuration using functional options.
type notifOption func(*NotifMutation)

// newNotifMutation creates new mutation for the Notif entity.
func newNotifMutation(c config, op Op, opts ...notifOption) *NotifMutation {
	m := &NotifMutation{
		config:        c,
		op:            op,
		typ:           TypeNotif,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotifID sets the ID field of the mutation.
func withNotifID(id uuid.UUID) notifOption {
	return func(m *NotifMutation) {
		var (
			err   error
			once  sync.Once
			value *Notif
		)
		m.oldValue = func(ctx context.Context) (*Notif, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notif.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotif sets the old Notif of the mutation.
func withNotif(node *Notif) notifOption {
	return func(m *NotifMutation) {
		m.oldValue = func(context.Context) (*Notif, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotifMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotifMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Notif entities.
func (m *NotifMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotifMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotifMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Notif.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *NotifMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotifMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *NotifMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *NotifMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotifMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *NotifMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *NotifMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *NotifMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *NotifMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *NotifMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *NotifMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *NotifMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *NotifMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *NotifMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *NotifMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *NotifMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *NotifMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *NotifMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[notif.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *NotifMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[notif.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *NotifMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, notif.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *NotifMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *NotifMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *NotifMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[notif.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *NotifMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[notif.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *NotifMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, notif.FieldUserID)
}

// SetAlreadyRead sets the "already_read" field.
func (m *NotifMutation) SetAlreadyRead(b bool) {
	m.already_read = &b
}

// AlreadyRead returns the value of the "already_read" field in the mutation.
func (m *NotifMutation) AlreadyRead() (r bool, exists bool) {
	v := m.already_read
	if v == nil {
		return
	}
	return *v, true
}

// OldAlreadyRead returns the old "already_read" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldAlreadyRead(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlreadyRead is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlreadyRead requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlreadyRead: %w", err)
	}
	return oldValue.AlreadyRead, nil
}

// ClearAlreadyRead clears the value of the "already_read" field.
func (m *NotifMutation) ClearAlreadyRead() {
	m.already_read = nil
	m.clearedFields[notif.FieldAlreadyRead] = struct{}{}
}

// AlreadyReadCleared returns if the "already_read" field was cleared in this mutation.
func (m *NotifMutation) AlreadyReadCleared() bool {
	_, ok := m.clearedFields[notif.FieldAlreadyRead]
	return ok
}

// ResetAlreadyRead resets all changes to the "already_read" field.
func (m *NotifMutation) ResetAlreadyRead() {
	m.already_read = nil
	delete(m.clearedFields, notif.FieldAlreadyRead)
}

// SetLangID sets the "lang_id" field.
func (m *NotifMutation) SetLangID(u uuid.UUID) {
	m.lang_id = &u
}

// LangID returns the value of the "lang_id" field in the mutation.
func (m *NotifMutation) LangID() (r uuid.UUID, exists bool) {
	v := m.lang_id
	if v == nil {
		return
	}
	return *v, true
}

// OldLangID returns the old "lang_id" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldLangID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLangID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLangID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLangID: %w", err)
	}
	return oldValue.LangID, nil
}

// ClearLangID clears the value of the "lang_id" field.
func (m *NotifMutation) ClearLangID() {
	m.lang_id = nil
	m.clearedFields[notif.FieldLangID] = struct{}{}
}

// LangIDCleared returns if the "lang_id" field was cleared in this mutation.
func (m *NotifMutation) LangIDCleared() bool {
	_, ok := m.clearedFields[notif.FieldLangID]
	return ok
}

// ResetLangID resets all changes to the "lang_id" field.
func (m *NotifMutation) ResetLangID() {
	m.lang_id = nil
	delete(m.clearedFields, notif.FieldLangID)
}

// SetEventType sets the "event_type" field.
func (m *NotifMutation) SetEventType(s string) {
	m.event_type = &s
}

// EventType returns the value of the "event_type" field in the mutation.
func (m *NotifMutation) EventType() (r string, exists bool) {
	v := m.event_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "event_type" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldEventType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ClearEventType clears the value of the "event_type" field.
func (m *NotifMutation) ClearEventType() {
	m.event_type = nil
	m.clearedFields[notif.FieldEventType] = struct{}{}
}

// EventTypeCleared returns if the "event_type" field was cleared in this mutation.
func (m *NotifMutation) EventTypeCleared() bool {
	_, ok := m.clearedFields[notif.FieldEventType]
	return ok
}

// ResetEventType resets all changes to the "event_type" field.
func (m *NotifMutation) ResetEventType() {
	m.event_type = nil
	delete(m.clearedFields, notif.FieldEventType)
}

// SetUseTemplate sets the "use_template" field.
func (m *NotifMutation) SetUseTemplate(b bool) {
	m.use_template = &b
}

// UseTemplate returns the value of the "use_template" field in the mutation.
func (m *NotifMutation) UseTemplate() (r bool, exists bool) {
	v := m.use_template
	if v == nil {
		return
	}
	return *v, true
}

// OldUseTemplate returns the old "use_template" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldUseTemplate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseTemplate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseTemplate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseTemplate: %w", err)
	}
	return oldValue.UseTemplate, nil
}

// ClearUseTemplate clears the value of the "use_template" field.
func (m *NotifMutation) ClearUseTemplate() {
	m.use_template = nil
	m.clearedFields[notif.FieldUseTemplate] = struct{}{}
}

// UseTemplateCleared returns if the "use_template" field was cleared in this mutation.
func (m *NotifMutation) UseTemplateCleared() bool {
	_, ok := m.clearedFields[notif.FieldUseTemplate]
	return ok
}

// ResetUseTemplate resets all changes to the "use_template" field.
func (m *NotifMutation) ResetUseTemplate() {
	m.use_template = nil
	delete(m.clearedFields, notif.FieldUseTemplate)
}

// SetTitle sets the "title" field.
func (m *NotifMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *NotifMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *NotifMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[notif.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *NotifMutation) TitleCleared() bool {
	_, ok := m.clearedFields[notif.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *NotifMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, notif.FieldTitle)
}

// SetContent sets the "content" field.
func (m *NotifMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *NotifMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ClearContent clears the value of the "content" field.
func (m *NotifMutation) ClearContent() {
	m.content = nil
	m.clearedFields[notif.FieldContent] = struct{}{}
}

// ContentCleared returns if the "content" field was cleared in this mutation.
func (m *NotifMutation) ContentCleared() bool {
	_, ok := m.clearedFields[notif.FieldContent]
	return ok
}

// ResetContent resets all changes to the "content" field.
func (m *NotifMutation) ResetContent() {
	m.content = nil
	delete(m.clearedFields, notif.FieldContent)
}

// SetChannels sets the "channels" field.
func (m *NotifMutation) SetChannels(s []string) {
	m.channels = &s
}

// Channels returns the value of the "channels" field in the mutation.
func (m *NotifMutation) Channels() (r []string, exists bool) {
	v := m.channels
	if v == nil {
		return
	}
	return *v, true
}

// OldChannels returns the old "channels" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldChannels(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannels is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannels requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannels: %w", err)
	}
	return oldValue.Channels, nil
}

// ClearChannels clears the value of the "channels" field.
func (m *NotifMutation) ClearChannels() {
	m.channels = nil
	m.clearedFields[notif.FieldChannels] = struct{}{}
}

// ChannelsCleared returns if the "channels" field was cleared in this mutation.
func (m *NotifMutation) ChannelsCleared() bool {
	_, ok := m.clearedFields[notif.FieldChannels]
	return ok
}

// ResetChannels resets all changes to the "channels" field.
func (m *NotifMutation) ResetChannels() {
	m.channels = nil
	delete(m.clearedFields, notif.FieldChannels)
}

// SetEmailSend sets the "email_send" field.
func (m *NotifMutation) SetEmailSend(b bool) {
	m.email_send = &b
}

// EmailSend returns the value of the "email_send" field in the mutation.
func (m *NotifMutation) EmailSend() (r bool, exists bool) {
	v := m.email_send
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailSend returns the old "email_send" field's value of the Notif entity.
// If the Notif object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotifMutation) OldEmailSend(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailSend is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailSend requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailSend: %w", err)
	}
	return oldValue.EmailSend, nil
}

// ClearEmailSend clears the value of the "email_send" field.
func (m *NotifMutation) ClearEmailSend() {
	m.email_send = nil
	m.clearedFields[notif.FieldEmailSend] = struct{}{}
}

// EmailSendCleared returns if the "email_send" field was cleared in this mutation.
func (m *NotifMutation) EmailSendCleared() bool {
	_, ok := m.clearedFields[notif.FieldEmailSend]
	return ok
}

// ResetEmailSend resets all changes to the "email_send" field.
func (m *NotifMutation) ResetEmailSend() {
	m.email_send = nil
	delete(m.clearedFields, notif.FieldEmailSend)
}

// Where appends a list predicates to the NotifMutation builder.
func (m *NotifMutation) Where(ps ...predicate.Notif) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NotifMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Notif).
func (m *NotifMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotifMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, notif.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, notif.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, notif.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, notif.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, notif.FieldUserID)
	}
	if m.already_read != nil {
		fields = append(fields, notif.FieldAlreadyRead)
	}
	if m.lang_id != nil {
		fields = append(fields, notif.FieldLangID)
	}
	if m.event_type != nil {
		fields = append(fields, notif.FieldEventType)
	}
	if m.use_template != nil {
		fields = append(fields, notif.FieldUseTemplate)
	}
	if m.title != nil {
		fields = append(fields, notif.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, notif.FieldContent)
	}
	if m.channels != nil {
		fields = append(fields, notif.FieldChannels)
	}
	if m.email_send != nil {
		fields = append(fields, notif.FieldEmailSend)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotifMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notif.FieldCreatedAt:
		return m.CreatedAt()
	case notif.FieldUpdatedAt:
		return m.UpdatedAt()
	case notif.FieldDeletedAt:
		return m.DeletedAt()
	case notif.FieldAppID:
		return m.AppID()
	case notif.FieldUserID:
		return m.UserID()
	case notif.FieldAlreadyRead:
		return m.AlreadyRead()
	case notif.FieldLangID:
		return m.LangID()
	case notif.FieldEventType:
		return m.EventType()
	case notif.FieldUseTemplate:
		return m.UseTemplate()
	case notif.FieldTitle:
		return m.Title()
	case notif.FieldContent:
		return m.Content()
	case notif.FieldChannels:
		return m.Channels()
	case notif.FieldEmailSend:
		return m.EmailSend()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotifMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notif.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notif.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case notif.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case notif.FieldAppID:
		return m.OldAppID(ctx)
	case notif.FieldUserID:
		return m.OldUserID(ctx)
	case notif.FieldAlreadyRead:
		return m.OldAlreadyRead(ctx)
	case notif.FieldLangID:
		return m.OldLangID(ctx)
	case notif.FieldEventType:
		return m.OldEventType(ctx)
	case notif.FieldUseTemplate:
		return m.OldUseTemplate(ctx)
	case notif.FieldTitle:
		return m.OldTitle(ctx)
	case notif.FieldContent:
		return m.OldContent(ctx)
	case notif.FieldChannels:
		return m.OldChannels(ctx)
	case notif.FieldEmailSend:
		return m.OldEmailSend(ctx)
	}
	return nil, fmt.Errorf("unknown Notif field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notif.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notif.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case notif.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case notif.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case notif.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case notif.FieldAlreadyRead:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlreadyRead(v)
		return nil
	case notif.FieldLangID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLangID(v)
		return nil
	case notif.FieldEventType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	case notif.FieldUseTemplate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseTemplate(v)
		return nil
	case notif.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case notif.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case notif.FieldChannels:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannels(v)
		return nil
	case notif.FieldEmailSend:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailSend(v)
		return nil
	}
	return fmt.Errorf("unknown Notif field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotifMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, notif.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, notif.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, notif.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotifMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case notif.FieldCreatedAt:
		return m.AddedCreatedAt()
	case notif.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case notif.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotifMutation) AddField(name string, value ent.Value) error {
	switch name {
	case notif.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case notif.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case notif.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Notif numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotifMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notif.FieldAppID) {
		fields = append(fields, notif.FieldAppID)
	}
	if m.FieldCleared(notif.FieldUserID) {
		fields = append(fields, notif.FieldUserID)
	}
	if m.FieldCleared(notif.FieldAlreadyRead) {
		fields = append(fields, notif.FieldAlreadyRead)
	}
	if m.FieldCleared(notif.FieldLangID) {
		fields = append(fields, notif.FieldLangID)
	}
	if m.FieldCleared(notif.FieldEventType) {
		fields = append(fields, notif.FieldEventType)
	}
	if m.FieldCleared(notif.FieldUseTemplate) {
		fields = append(fields, notif.FieldUseTemplate)
	}
	if m.FieldCleared(notif.FieldTitle) {
		fields = append(fields, notif.FieldTitle)
	}
	if m.FieldCleared(notif.FieldContent) {
		fields = append(fields, notif.FieldContent)
	}
	if m.FieldCleared(notif.FieldChannels) {
		fields = append(fields, notif.FieldChannels)
	}
	if m.FieldCleared(notif.FieldEmailSend) {
		fields = append(fields, notif.FieldEmailSend)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotifMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotifMutation) ClearField(name string) error {
	switch name {
	case notif.FieldAppID:
		m.ClearAppID()
		return nil
	case notif.FieldUserID:
		m.ClearUserID()
		return nil
	case notif.FieldAlreadyRead:
		m.ClearAlreadyRead()
		return nil
	case notif.FieldLangID:
		m.ClearLangID()
		return nil
	case notif.FieldEventType:
		m.ClearEventType()
		return nil
	case notif.FieldUseTemplate:
		m.ClearUseTemplate()
		return nil
	case notif.FieldTitle:
		m.ClearTitle()
		return nil
	case notif.FieldContent:
		m.ClearContent()
		return nil
	case notif.FieldChannels:
		m.ClearChannels()
		return nil
	case notif.FieldEmailSend:
		m.ClearEmailSend()
		return nil
	}
	return fmt.Errorf("unknown Notif nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotifMutation) ResetField(name string) error {
	switch name {
	case notif.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notif.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case notif.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case notif.FieldAppID:
		m.ResetAppID()
		return nil
	case notif.FieldUserID:
		m.ResetUserID()
		return nil
	case notif.FieldAlreadyRead:
		m.ResetAlreadyRead()
		return nil
	case notif.FieldLangID:
		m.ResetLangID()
		return nil
	case notif.FieldEventType:
		m.ResetEventType()
		return nil
	case notif.FieldUseTemplate:
		m.ResetUseTemplate()
		return nil
	case notif.FieldTitle:
		m.ResetTitle()
		return nil
	case notif.FieldContent:
		m.ResetContent()
		return nil
	case notif.FieldChannels:
		m.ResetChannels()
		return nil
	case notif.FieldEmailSend:
		m.ResetEmailSend()
		return nil
	}
	return fmt.Errorf("unknown Notif field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotifMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotifMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotifMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotifMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotifMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotifMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotifMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Notif unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotifMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Notif edge %s", name)
}

// ReadAnnouncementMutation represents an operation that mutates the ReadAnnouncement nodes in the graph.
type ReadAnnouncementMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	app_id          *uuid.UUID
	user_id         *uuid.UUID
	announcement_id *uuid.UUID
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*ReadAnnouncement, error)
	predicates      []predicate.ReadAnnouncement
}

var _ ent.Mutation = (*ReadAnnouncementMutation)(nil)

// readannouncementOption allows management of the mutation configuration using functional options.
type readannouncementOption func(*ReadAnnouncementMutation)

// newReadAnnouncementMutation creates new mutation for the ReadAnnouncement entity.
func newReadAnnouncementMutation(c config, op Op, opts ...readannouncementOption) *ReadAnnouncementMutation {
	m := &ReadAnnouncementMutation{
		config:        c,
		op:            op,
		typ:           TypeReadAnnouncement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReadAnnouncementID sets the ID field of the mutation.
func withReadAnnouncementID(id uuid.UUID) readannouncementOption {
	return func(m *ReadAnnouncementMutation) {
		var (
			err   error
			once  sync.Once
			value *ReadAnnouncement
		)
		m.oldValue = func(ctx context.Context) (*ReadAnnouncement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ReadAnnouncement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReadAnnouncement sets the old ReadAnnouncement of the mutation.
func withReadAnnouncement(node *ReadAnnouncement) readannouncementOption {
	return func(m *ReadAnnouncementMutation) {
		m.oldValue = func(context.Context) (*ReadAnnouncement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReadAnnouncementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReadAnnouncementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ReadAnnouncement entities.
func (m *ReadAnnouncementMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReadAnnouncementMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReadAnnouncementMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ReadAnnouncement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ReadAnnouncementMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ReadAnnouncementMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *ReadAnnouncementMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *ReadAnnouncementMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ReadAnnouncementMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ReadAnnouncementMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ReadAnnouncementMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *ReadAnnouncementMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *ReadAnnouncementMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ReadAnnouncementMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ReadAnnouncementMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ReadAnnouncementMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *ReadAnnouncementMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *ReadAnnouncementMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ReadAnnouncementMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *ReadAnnouncementMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *ReadAnnouncementMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *ReadAnnouncementMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[readannouncement.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *ReadAnnouncementMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[readannouncement.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *ReadAnnouncementMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, readannouncement.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *ReadAnnouncementMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ReadAnnouncementMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *ReadAnnouncementMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[readannouncement.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *ReadAnnouncementMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[readannouncement.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ReadAnnouncementMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, readannouncement.FieldUserID)
}

// SetAnnouncementID sets the "announcement_id" field.
func (m *ReadAnnouncementMutation) SetAnnouncementID(u uuid.UUID) {
	m.announcement_id = &u
}

// AnnouncementID returns the value of the "announcement_id" field in the mutation.
func (m *ReadAnnouncementMutation) AnnouncementID() (r uuid.UUID, exists bool) {
	v := m.announcement_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAnnouncementID returns the old "announcement_id" field's value of the ReadAnnouncement entity.
// If the ReadAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReadAnnouncementMutation) OldAnnouncementID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnnouncementID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnnouncementID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnnouncementID: %w", err)
	}
	return oldValue.AnnouncementID, nil
}

// ClearAnnouncementID clears the value of the "announcement_id" field.
func (m *ReadAnnouncementMutation) ClearAnnouncementID() {
	m.announcement_id = nil
	m.clearedFields[readannouncement.FieldAnnouncementID] = struct{}{}
}

// AnnouncementIDCleared returns if the "announcement_id" field was cleared in this mutation.
func (m *ReadAnnouncementMutation) AnnouncementIDCleared() bool {
	_, ok := m.clearedFields[readannouncement.FieldAnnouncementID]
	return ok
}

// ResetAnnouncementID resets all changes to the "announcement_id" field.
func (m *ReadAnnouncementMutation) ResetAnnouncementID() {
	m.announcement_id = nil
	delete(m.clearedFields, readannouncement.FieldAnnouncementID)
}

// Where appends a list predicates to the ReadAnnouncementMutation builder.
func (m *ReadAnnouncementMutation) Where(ps ...predicate.ReadAnnouncement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ReadAnnouncementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ReadAnnouncement).
func (m *ReadAnnouncementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReadAnnouncementMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, readannouncement.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, readannouncement.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, readannouncement.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, readannouncement.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, readannouncement.FieldUserID)
	}
	if m.announcement_id != nil {
		fields = append(fields, readannouncement.FieldAnnouncementID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReadAnnouncementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case readannouncement.FieldCreatedAt:
		return m.CreatedAt()
	case readannouncement.FieldUpdatedAt:
		return m.UpdatedAt()
	case readannouncement.FieldDeletedAt:
		return m.DeletedAt()
	case readannouncement.FieldAppID:
		return m.AppID()
	case readannouncement.FieldUserID:
		return m.UserID()
	case readannouncement.FieldAnnouncementID:
		return m.AnnouncementID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReadAnnouncementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case readannouncement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case readannouncement.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case readannouncement.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case readannouncement.FieldAppID:
		return m.OldAppID(ctx)
	case readannouncement.FieldUserID:
		return m.OldUserID(ctx)
	case readannouncement.FieldAnnouncementID:
		return m.OldAnnouncementID(ctx)
	}
	return nil, fmt.Errorf("unknown ReadAnnouncement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReadAnnouncementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case readannouncement.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case readannouncement.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case readannouncement.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case readannouncement.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case readannouncement.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case readannouncement.FieldAnnouncementID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnnouncementID(v)
		return nil
	}
	return fmt.Errorf("unknown ReadAnnouncement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReadAnnouncementMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, readannouncement.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, readannouncement.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, readannouncement.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReadAnnouncementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case readannouncement.FieldCreatedAt:
		return m.AddedCreatedAt()
	case readannouncement.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case readannouncement.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReadAnnouncementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case readannouncement.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case readannouncement.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case readannouncement.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ReadAnnouncement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReadAnnouncementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(readannouncement.FieldAppID) {
		fields = append(fields, readannouncement.FieldAppID)
	}
	if m.FieldCleared(readannouncement.FieldUserID) {
		fields = append(fields, readannouncement.FieldUserID)
	}
	if m.FieldCleared(readannouncement.FieldAnnouncementID) {
		fields = append(fields, readannouncement.FieldAnnouncementID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReadAnnouncementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReadAnnouncementMutation) ClearField(name string) error {
	switch name {
	case readannouncement.FieldAppID:
		m.ClearAppID()
		return nil
	case readannouncement.FieldUserID:
		m.ClearUserID()
		return nil
	case readannouncement.FieldAnnouncementID:
		m.ClearAnnouncementID()
		return nil
	}
	return fmt.Errorf("unknown ReadAnnouncement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReadAnnouncementMutation) ResetField(name string) error {
	switch name {
	case readannouncement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case readannouncement.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case readannouncement.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case readannouncement.FieldAppID:
		m.ResetAppID()
		return nil
	case readannouncement.FieldUserID:
		m.ResetUserID()
		return nil
	case readannouncement.FieldAnnouncementID:
		m.ResetAnnouncementID()
		return nil
	}
	return fmt.Errorf("unknown ReadAnnouncement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReadAnnouncementMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReadAnnouncementMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReadAnnouncementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReadAnnouncementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReadAnnouncementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReadAnnouncementMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReadAnnouncementMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ReadAnnouncement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReadAnnouncementMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ReadAnnouncement edge %s", name)
}

// SendAnnouncementMutation represents an operation that mutates the SendAnnouncement nodes in the graph.
type SendAnnouncementMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *uint32
	addcreated_at   *int32
	updated_at      *uint32
	addupdated_at   *int32
	deleted_at      *uint32
	adddeleted_at   *int32
	app_id          *uuid.UUID
	user_id         *uuid.UUID
	announcement_id *uuid.UUID
	channel         *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*SendAnnouncement, error)
	predicates      []predicate.SendAnnouncement
}

var _ ent.Mutation = (*SendAnnouncementMutation)(nil)

// sendannouncementOption allows management of the mutation configuration using functional options.
type sendannouncementOption func(*SendAnnouncementMutation)

// newSendAnnouncementMutation creates new mutation for the SendAnnouncement entity.
func newSendAnnouncementMutation(c config, op Op, opts ...sendannouncementOption) *SendAnnouncementMutation {
	m := &SendAnnouncementMutation{
		config:        c,
		op:            op,
		typ:           TypeSendAnnouncement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSendAnnouncementID sets the ID field of the mutation.
func withSendAnnouncementID(id uuid.UUID) sendannouncementOption {
	return func(m *SendAnnouncementMutation) {
		var (
			err   error
			once  sync.Once
			value *SendAnnouncement
		)
		m.oldValue = func(ctx context.Context) (*SendAnnouncement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SendAnnouncement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSendAnnouncement sets the old SendAnnouncement of the mutation.
func withSendAnnouncement(node *SendAnnouncement) sendannouncementOption {
	return func(m *SendAnnouncementMutation) {
		m.oldValue = func(context.Context) (*SendAnnouncement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SendAnnouncementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SendAnnouncementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SendAnnouncement entities.
func (m *SendAnnouncementMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SendAnnouncementMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SendAnnouncementMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SendAnnouncement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SendAnnouncementMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SendAnnouncementMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *SendAnnouncementMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *SendAnnouncementMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SendAnnouncementMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SendAnnouncementMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SendAnnouncementMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *SendAnnouncementMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *SendAnnouncementMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SendAnnouncementMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *SendAnnouncementMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *SendAnnouncementMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *SendAnnouncementMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *SendAnnouncementMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *SendAnnouncementMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetAppID sets the "app_id" field.
func (m *SendAnnouncementMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *SendAnnouncementMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ClearAppID clears the value of the "app_id" field.
func (m *SendAnnouncementMutation) ClearAppID() {
	m.app_id = nil
	m.clearedFields[sendannouncement.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "app_id" field was cleared in this mutation.
func (m *SendAnnouncementMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[sendannouncement.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "app_id" field.
func (m *SendAnnouncementMutation) ResetAppID() {
	m.app_id = nil
	delete(m.clearedFields, sendannouncement.FieldAppID)
}

// SetUserID sets the "user_id" field.
func (m *SendAnnouncementMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SendAnnouncementMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *SendAnnouncementMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[sendannouncement.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *SendAnnouncementMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[sendannouncement.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SendAnnouncementMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, sendannouncement.FieldUserID)
}

// SetAnnouncementID sets the "announcement_id" field.
func (m *SendAnnouncementMutation) SetAnnouncementID(u uuid.UUID) {
	m.announcement_id = &u
}

// AnnouncementID returns the value of the "announcement_id" field in the mutation.
func (m *SendAnnouncementMutation) AnnouncementID() (r uuid.UUID, exists bool) {
	v := m.announcement_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAnnouncementID returns the old "announcement_id" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldAnnouncementID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnnouncementID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnnouncementID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnnouncementID: %w", err)
	}
	return oldValue.AnnouncementID, nil
}

// ClearAnnouncementID clears the value of the "announcement_id" field.
func (m *SendAnnouncementMutation) ClearAnnouncementID() {
	m.announcement_id = nil
	m.clearedFields[sendannouncement.FieldAnnouncementID] = struct{}{}
}

// AnnouncementIDCleared returns if the "announcement_id" field was cleared in this mutation.
func (m *SendAnnouncementMutation) AnnouncementIDCleared() bool {
	_, ok := m.clearedFields[sendannouncement.FieldAnnouncementID]
	return ok
}

// ResetAnnouncementID resets all changes to the "announcement_id" field.
func (m *SendAnnouncementMutation) ResetAnnouncementID() {
	m.announcement_id = nil
	delete(m.clearedFields, sendannouncement.FieldAnnouncementID)
}

// SetChannel sets the "channel" field.
func (m *SendAnnouncementMutation) SetChannel(s string) {
	m.channel = &s
}

// Channel returns the value of the "channel" field in the mutation.
func (m *SendAnnouncementMutation) Channel() (r string, exists bool) {
	v := m.channel
	if v == nil {
		return
	}
	return *v, true
}

// OldChannel returns the old "channel" field's value of the SendAnnouncement entity.
// If the SendAnnouncement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SendAnnouncementMutation) OldChannel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannel: %w", err)
	}
	return oldValue.Channel, nil
}

// ClearChannel clears the value of the "channel" field.
func (m *SendAnnouncementMutation) ClearChannel() {
	m.channel = nil
	m.clearedFields[sendannouncement.FieldChannel] = struct{}{}
}

// ChannelCleared returns if the "channel" field was cleared in this mutation.
func (m *SendAnnouncementMutation) ChannelCleared() bool {
	_, ok := m.clearedFields[sendannouncement.FieldChannel]
	return ok
}

// ResetChannel resets all changes to the "channel" field.
func (m *SendAnnouncementMutation) ResetChannel() {
	m.channel = nil
	delete(m.clearedFields, sendannouncement.FieldChannel)
}

// Where appends a list predicates to the SendAnnouncementMutation builder.
func (m *SendAnnouncementMutation) Where(ps ...predicate.SendAnnouncement) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SendAnnouncementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (SendAnnouncement).
func (m *SendAnnouncementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SendAnnouncementMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, sendannouncement.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, sendannouncement.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, sendannouncement.FieldDeletedAt)
	}
	if m.app_id != nil {
		fields = append(fields, sendannouncement.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, sendannouncement.FieldUserID)
	}
	if m.announcement_id != nil {
		fields = append(fields, sendannouncement.FieldAnnouncementID)
	}
	if m.channel != nil {
		fields = append(fields, sendannouncement.FieldChannel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SendAnnouncementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sendannouncement.FieldCreatedAt:
		return m.CreatedAt()
	case sendannouncement.FieldUpdatedAt:
		return m.UpdatedAt()
	case sendannouncement.FieldDeletedAt:
		return m.DeletedAt()
	case sendannouncement.FieldAppID:
		return m.AppID()
	case sendannouncement.FieldUserID:
		return m.UserID()
	case sendannouncement.FieldAnnouncementID:
		return m.AnnouncementID()
	case sendannouncement.FieldChannel:
		return m.Channel()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SendAnnouncementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sendannouncement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case sendannouncement.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case sendannouncement.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case sendannouncement.FieldAppID:
		return m.OldAppID(ctx)
	case sendannouncement.FieldUserID:
		return m.OldUserID(ctx)
	case sendannouncement.FieldAnnouncementID:
		return m.OldAnnouncementID(ctx)
	case sendannouncement.FieldChannel:
		return m.OldChannel(ctx)
	}
	return nil, fmt.Errorf("unknown SendAnnouncement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SendAnnouncementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sendannouncement.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case sendannouncement.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case sendannouncement.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case sendannouncement.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case sendannouncement.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case sendannouncement.FieldAnnouncementID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnnouncementID(v)
		return nil
	case sendannouncement.FieldChannel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannel(v)
		return nil
	}
	return fmt.Errorf("unknown SendAnnouncement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SendAnnouncementMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, sendannouncement.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, sendannouncement.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, sendannouncement.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SendAnnouncementMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sendannouncement.FieldCreatedAt:
		return m.AddedCreatedAt()
	case sendannouncement.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case sendannouncement.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SendAnnouncementMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sendannouncement.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case sendannouncement.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case sendannouncement.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SendAnnouncement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SendAnnouncementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sendannouncement.FieldAppID) {
		fields = append(fields, sendannouncement.FieldAppID)
	}
	if m.FieldCleared(sendannouncement.FieldUserID) {
		fields = append(fields, sendannouncement.FieldUserID)
	}
	if m.FieldCleared(sendannouncement.FieldAnnouncementID) {
		fields = append(fields, sendannouncement.FieldAnnouncementID)
	}
	if m.FieldCleared(sendannouncement.FieldChannel) {
		fields = append(fields, sendannouncement.FieldChannel)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SendAnnouncementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SendAnnouncementMutation) ClearField(name string) error {
	switch name {
	case sendannouncement.FieldAppID:
		m.ClearAppID()
		return nil
	case sendannouncement.FieldUserID:
		m.ClearUserID()
		return nil
	case sendannouncement.FieldAnnouncementID:
		m.ClearAnnouncementID()
		return nil
	case sendannouncement.FieldChannel:
		m.ClearChannel()
		return nil
	}
	return fmt.Errorf("unknown SendAnnouncement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SendAnnouncementMutation) ResetField(name string) error {
	switch name {
	case sendannouncement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case sendannouncement.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case sendannouncement.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case sendannouncement.FieldAppID:
		m.ResetAppID()
		return nil
	case sendannouncement.FieldUserID:
		m.ResetUserID()
		return nil
	case sendannouncement.FieldAnnouncementID:
		m.ResetAnnouncementID()
		return nil
	case sendannouncement.FieldChannel:
		m.ResetChannel()
		return nil
	}
	return fmt.Errorf("unknown SendAnnouncement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SendAnnouncementMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SendAnnouncementMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SendAnnouncementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SendAnnouncementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SendAnnouncementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SendAnnouncementMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SendAnnouncementMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SendAnnouncement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SendAnnouncementMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SendAnnouncement edge %s", name)
}
